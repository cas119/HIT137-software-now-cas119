# -*- coding: utf-8 -*-
"""Q2-Treasure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_xluDTsUMfmX0TIYALK-wtwyUJ8tvhzE
"""

from google.colab import drive
drive.mount('/content/drive')

pip install Pillow

# Chapter 1: The Gatekeeper

from PIL import Image
import time

def modify_image(file_path):
    try:
        # Generate the number
        current_time = int(time.time())
        generated_number = (current_time % 100) + 50
        if generated_number % 2 == 0:
            generated_number += 10

        # Open an image and modify it
        img = Image.open(file_path)
        img = img.convert('RGB')  # Ensure it's in RGB format
        pixels = img.load()

        # Modify the pixels
        for i in range(img.width):
            for j in range(img.height):
                r, g, b = pixels[i, j]
                pixels[i, j] = ((r + generated_number) % 256,
                                (g + generated_number) % 256,
                                (b + generated_number) % 256)

        # Save the new image
        img.save('/content/drive/MyDrive/HIT137/chapter1out.png')

        # Calculate the sum of the red pixel values
        red_sum = sum(pixels[i, j][0] for i in range(img.width) for j in range(img.height))
        return red_sum
    except IOError:
        print("Error: The file could not be opened or found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example for Chapter1.jpg
red_pixel_sum = modify_image('/content/drive/MyDrive/HIT137/chapter1.jpg')
print(red_pixel_sum)

# Chapter 2: The Chamber of Strings

def process_string(long_str):
    if len(long_str) < 16:
        raise ValueError("String must be at least 16 characters long")

    # Separate numbers and letters
    number_string = ''.join(filter(str.isdigit, long_str))
    print("Number String: " + number_string)

    letter_string = ''.join(filter(str.isalpha, long_str))
    print("Letter String: " + letter_string + "\n")

    # Separate Even Numbers and Convert to their ASCII values
    even_num_string = ""
    ascii_numbers = []
    for num in number_string:
      if int(num) % 2 == 0:
        even_num_string += num + " "
        ascii_numbers += [str(ord(num))]

    print("Even Numbers: " + even_num_string)
    print("ASCII Values of Even Numbers: " + str(ascii_numbers) + "\n")

    # Separate Upper-case letters and Convert to their ASCII values
    upper_string = ""
    ascii_upper = []
    for letter in letter_string:
      if letter.isupper():
        upper_string += letter + " "
        ascii_upper += [str(ord(letter))]

    print("Upper Case Letters: " + upper_string)
    print("ASCII Values of Upper Case Letters: " + str(ascii_upper) + "\n")
    ascii_uppercase = [str(ord(char)) for char in letter_string if char.isupper()]

    return ascii_numbers + ascii_uppercase

# Example for converting Even numbers and Upper-case letters into ASCII values from the long string
try:
    input_string = "56aAww1984sktr235270aYmn145ss785fsq31D0"
    result = process_string(input_string)
    print("The Result: " + str(result))
except Exception as e:
    print(e)
